#!/usr/bin/env bash

# $1 = root directory, $2 = remote, $3 = branch names, $4 = ff only, $5 = regex 
# set -e

# constants
get_repository_name_regex='^[^\/]\+\/\/\([^\/]\+\/\)\+\([^\/]\+\)\.git$'
get_stash_regex='^\([^:]\+\).*'

# variables
root_directory="${1:-.}"
remote="${2:-origin}"
IFS=',' read -ra branches <<< "${3:-master}" 
ff_only="${4:-true}"
repository_name_regex="${5:-.*}"

# verify variables
# echo "${root_directory}"
# echo "${remote}"
# echo "${branches[@]}"
# echo "${ff_only}"

# functions
elementIn()
{
	local toSearch element
	toSearch="${1}"
  	shift
  	for element; do [[ "$element" == "$toSearch" ]] && return 0; done
  	return 1
}

shopt -s nullglob
getGitRepositories()
{
	local root rootFolder="${1}"

	# The algorithm:
	# Is the current folder a "git directory" i.e. are we in the git workspace or git folder? (If the latter, move to workspace, hmm actually not reliably posssible because the .git dir doesn't store any reference to a work tree)
		# If yes, return it and change directory to parent. Are we now in a parent directory of the root? If so terminate.
		# If no, treat all the child folders recursively.

	#echo "changing directory to ${rootFolder}"
	cd "${rootFolder}" >/dev/null

	inside_git_dir=$(git rev-parse --is-inside-git-dir 2>/dev/null)
	inside_git_dir_status_code=$?
	#echo "inside_git_dir status code: $inside_git_dir_status_code"
	#echo "inside_git_dir: $inside_git_dir"

	if [[ $inside_git_dir_status_code -eq 0 ]]
	then
		#echo "inside git dir"
		while [[ $inside_git_dir = true ]]
		do
			#echo "moving up one dir"
			cd .. > /dev/null
			inside_git_dir=$(git rev-parse --is-inside-git-dir 2>/dev/null) || { echo "Cannot determine work tree for external GIT_DIR $rootFolder" >&2; return 1; }
		done

		root=$(git rev-parse --show-toplevel 2>/dev/null)
		#echo "root: $root"

		if [[ -n $root ]]
		then
			echo "${root}"
			return 0
		else
			echo "Cannot determine root directory for an unknown reason $rootFolder" >&2 && return 128
		fi
	else
		echo "$rootFolder is not a git directory, checking child folders" >&2
		for folder in "${rootFolder}"/*/
		do
			#echo "${folder}"
			getGitRepositories "${folder}"
		done
	fi
}

# script
while IFS='' read -r git_repo
do
	pushd "${git_repo}" >/dev/null
	echo "changed to directory $git_repo"

	IFS='' read -ra existing_remotes <<< $(git remote)

	echo "existing remotes: ${existing_remotes[@]}"

	if ! elementIn "${remote}" "${existing_remotes[@]}"
	then
		echo "${remote} does not exist!"
		echo "Skipping this repository."
		popd >/dev/null
		continue
	fi

	remote_url=$(git remote get-url "${remote}")
	repository_name=$(echo "${remote_url}" | sed 's/'"${get_repository_name_regex}"'/\2/')

	echo "remote url: ${remote_url}"
	echo "repository name: ${repository_name}"

	if [[ ${repository_name} == ${remote_url} ]]
	then
		echo "Skipping this repository since $remote_url does not look like a valid git remote url"
		popd >/dev/null
		continue
	fi

	shopt -s nocasematch

	if [[ ! ${repository_name} =~ ${repository_name_regex} ]]
	then
		echo "Skipping ${repository_name} since it does not match the given regex ${repository_name_regex}"
		popd >/dev/null
		continue
	fi

	shopt -u nocasematch

	echo 'fetching new content for '"${remote_url}"
	git fetch --tags --prune "${remote_url}" "${branches[@]}"

	if [[ ! $? -eq 0 ]]
	then
		echo "One or multiple branches of ${branches[@]} were not found on the remote."
		echo "Skipping this repository."
		popd >/dev/null
		continue
	fi

	initialBranch="$(git rev-parse --abbrev-ref HEAD)"
	stashed=false

	for branch in "${branches[@]}"
	do
		echo "checking out branch $branch"
		git checkout "${branch}"

		if [[ ! $? -eq 0 ]]
		then
			stashMessage="$(date +"%Y-%m-%d_%H-%M-%S"): uncommitted changes on branch $(git rev-parse --abbrev-ref HEAD)"
			git stash push -m "${stashMessage}"
			stashed=true
			git checkout "${branch}"
		fi

		if [[ "${ff_only}" = true ]]
		then
			echo "fast foward merging with ${remote}/${branch}"
			git merge --ff-only "${remote}"/"${branch}"
		else
			echo "merging with ${remote}/${branch}"
			git merge "${remote}"/"${branch}"
		fi
	done

	git checkout "${initialBranch}"
	if $stashed
	then
		# use the stash where message matches the stashMessage instead
		ourStash=$(git stash list | grep "${stashMessage}" | sed 's/'"${get_stash_regex}"'/\1/')
		echo "Stash containing uncommitted work tree changes: $ourStash"
		git stash pop "${ourStash}"
	fi

	popd >/dev/null

done < <(getGitRepositories "${root_directory}")
